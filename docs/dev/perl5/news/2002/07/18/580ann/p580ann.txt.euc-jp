Perl 5.8.0 リリース！

Perl 5 開発チーム一同は、Perl Release 5.8.0 を発表できることを光栄に思
います。

Perl 5.8.0 はコンピュータ言語 Perl 5 のメジャーリリースです。Perl
5.8.0 は、前回のメジャーリリース、Perl 5.6.0 および 5.6.1 以降の主要な
変更および修正を全て含んでいます。

Perl 5.8.0 は、Comprehensive Perl Archive Network (CPAN) を通じて入手可
能です。お近くのミラーサイトからダウンロードしてください。ミラーサイトの
リストは http://mirrors.cpan.org/ を御覧下さい。以下、日本のサイトのみ列
挙します。

日本
	ftp://ftp.u-aizu.ac.jp/pub/CPAN/src/perl-5.8.0.tar.gz
	ftp://ftp.kddlabs.co.jp/CPAN/src/perl-5.8.0.tar.gz
	http://mirror.nucba.ac.jp/mirror/Perl/src/perl-5.8.0.tar.gz
	ftp://mirror.nucba.ac.jp/mirror/Perl/src/perl-5.8.0.tar.gz
	ftp://ftp.meisei-u.ac.jp/pub/CPAN/src/perl-5.8.0.tar.gz
	ftp://ftp.ayamura.org/pub/CPAN/src/perl-5.8.0.tar.gz
	ftp://ftp.jaist.ac.jp/pub/lang/perl/CPAN/src/perl-5.8.0.tar.gz
	ftp://ftp.dti.ad.jp/pub/lang/CPAN/src/perl-5.8.0.tar.gz
	ftp://ftp.ring.gr.jp/pub/lang/perl/CPAN/src/perl-5.8.0.tar.gz


今まで同様、Perlは多岐に渡るプラットフォームをサポートします。サポート対
象としては、既存の全てのUnixおよびLinux、Microsoftの全てのOS、そして
BeOS, Cygwin, Netware, MPE/iX, OS/2, QNX, VMS, VOS, および z/OS といっ
た、充分なPOSIXサポートを持つプラットフォームです。MacOS Classicに関して
は http://dev.macperl.org/ を御覧下さい。また、サポートされているプラッ
トフォームの一覧が pod/perlport.pod にあるので参照してください。

本リリースはソースコードによるリリースであり、バイナリーリリースではあり
ません。ビルドにはC言語環境が必要です。ただし、多くのベンダーがバイナ
リーリリースを用意しています。

Perlのビルドおよびインストールの方法に関しては、INSTALLファイルおよびプ
ラットフォーム別のREADMEファイル(README.platform)を参照してください。

ビルドに要する時間は、環境によって大いに変わることに注意してください。
Perl 5.8.0 のサイズは Perl 5.6.1 の2倍となっており、またソースコードの
いくつかは非常に巨大なので、コンパイラーによってはこれらのコンパイルにか
なりの時間がかかります。最新のCPUと大量のメモリーを積んだシステムではも
のの10分もあればビルドが完了しますが、旧式でメモリーの少ないシステムに
よってはおよそ八時間を必要とします。平均的な数字としては、30分から1時間
程度が目安です。

"make test"に要する時間も同様です。Perl 5.8.0 に付属するテスト項目は
Perl 5.6.1 の6倍にもおよびます。15分から30分というのが目安ですが、旧式
のシステムでは何時間もかかることもあります。

Perl ライセンス (Artistic もしくは Copying というファイルを参照)に明記
されているとおり、本パッケージには保証は一切ありません。

いつものことですが、実運用環境でのご使用の前には、充分なテストを行うよ
う留意してください。

Perl 5.6.0 以降採用されたリリース番号の振り方にのっとり、Perl 5.8 系列は
メンテナンスリリースとなり、Hugo van der Sanden 統括の開発版リリース 5.9
系列が新たに設けられます。Perl 5.8.0 に対する最初のメンテナンスリリース
は 5.8.1 ですが、Perl 5.9.0 はそれ以前に登場する予定です。なお、Perl
5.8.0 の登場は必ずしも Perl 5.6 系列の終焉を意味するものではありません
が、Perl 5.6.2 のリリースを確約するものでもありません。Perl 5.6.2 がリ
リースされるかいなかは、Perl 5.8.0 の安定度にもよるでしょう。

非常に簡略化された主な変更点の概要を以下に示します。より詳しい変更点に関
しては pod/perldelta.pod を御覧下さい。また、さらに詳しい変更点の一覧が
Changesファイルにあります。

Share and Enjoy!

-- Jarkko Hietaniemi, Perl5 Porters を代表して。

*** 技術的詳細は以下のとおり ***

概要

5.8.0 のハイライト

- Unicode サポートの改善:
  Unicode サポートが、関連する全ての段階において大いに強化されました。
  - Unicode 3.2.0 のサポート (5.6.1 では Unicode 3.0.1)
  - 言語（および内部）レベルでのUnicodeサポートがより強力かつ普遍的に。
  - Unicodeによる正規表現サポート
  - Encodeモジュールによる非ラテン語系(簡体字/繁体字中国語、日本語、
   ハングルなど)の文字コードのサポート
    
- スレッド(Threads)の実装の刷新:
　マルチスレッドのモデルとしてインタープリター型のスレッド(ithread)が
　追加されました。今後は旧式の「5.005スレッド」に代えてこちらのスレッド
　モデルの使用が強く推奨されます。「5.005スレッド」との最も大きな違い
　は、ithreadsではデータの共有は全て明示的に行う必要があることが挙げら
　れます。
  
- IOの実装の刷新:
  新規に導入された PerlIO は、ポータブルな stdio によるIOの実装に加え、
  より柔軟性に富んだIOのフレームワークを提供します。

- 数値演算の精度向上:
  旧バージョンの Perl では、文字列-数値の変換ルーチンがベンダー依存
  だったため、ポータビリティおよび精度を損なっていたのを改善しました。

- 64-bit サポート:
  64-bit サポートは本リリースにおいて成熟の粋に達しています。64-bit
  の整数、アドレス、および双方をサポートするプラットフォーム上では、
  これらの機能を利用するよう Perl をコンパイルすることが可能です。

- より安全なシグナル制御:
　旧バージョンの Perl では、シグナル制御により Perl の実行系の内部状態
　がおかしくなる場合があったのを修正いたしました。

- 新モジュールの大量導入:
  Digest::MD5, File::Temp, Filter::Simple, libnet, List::Util,
  Memoize, MIME::Base64, Scalar::Util, Storable, Switch,
  Test::More, Test::Simple, Text::Balanced, Tie::File, ...

- より強化されたリグレッションテスト:
　前バージョンの 5.6 と比較して、本バージョンでは6倍にもおよぶテスト
　が附随しており、毎日テストが行われているプラットフォームも珍しくあ
　りません。
  
非互換性
  
- バイナリー非互換:
  主に PerlIO の導入により、 Perl 5.8 は以前の Perl 5 XS モジュール
  との互換性がありません。XSを含むモジュールに関しては、再コンパイル
  の必要がある点に留意してください。もちろんスクリプトに関しては以前
  の Perl 5 との互換性が保たれています(以下に挙げる例外を除く)。

- AIX のダイナミックローディング:
  AIX においては、Perlは今までのエミュレーションによるダイナミック
  ローディングではなく、AIX付属のダイナミックローディングを利用する
  よう改められ、これにより他のAIXアプリケーションとの互換性が向上
  しました。

- 64-bit プラットフォーム上での Perl 付属の Malloc の使用停止:
  Perl 付属の malloc は 64-bit プラットフォームとの相性が悪いため、
  デフォルトでプラットフォーム本来の malloc を使用するように
  なりました。

- ハッシングの順序の再変更
  ハッシュの実装に用いられるハッシュ関数が変更され、これによりハッシュ
  効率が向上しましたが、ハッシュの順序を期待したプログラミングは当然
  非互換になります（もちろん DB_File の BTREE などに tie したハッシュは
  この限りではありません）。
  
- myで扱われる属性(Attributes)の扱いがランタイム時に:
　以前はコンパイル時に行われていたものを改めました。
　
- SCALAR(...) から  REF(...) に:
  ref()の結果との整合性を取るため、参照の参照を文字列化した場合には、
  "SCALAR(...)"ではなく"REF(...)"と文字化されるようになりました。

- Unicode モデルの変更("use utf8"の必要性の減少)
　Perl 5.6 では、「Unicode属性」は"use utf8"が有効なブロック内で判定
　されていましたが、 Perl 5.8 では、データごとに「Unicode属性」が設定
　されるため、"use utf8"を必要とするケースが格段に減りました。唯一
　明示的に"use utf8"する必要があるのは、スクリプト自体がutf8のリテラル
　を含む場合です。
　
- VMS: Socket機能の動的化(Dynamic)およびAlphaでのIEEE浮動小数点の
  デフォルト化
  - Socket XSが静的ではなく動的にリンクされるようになり、旧型のいくつ
    かのVMS上で動かなかった問題が解消されました。
  - OpenVMS Alpha での浮動小数点の扱いがデフォルトでIEEE準拠になりまし 
 　 た。詳しくは　README.vms を参照してください。

用語の変更
- "Camel III"(ラクダ本第三版)で"IO discipline"とされている用語は、
  "IO layer"に変更されました。

非推奨化された機能

- dump():
　機能そのものが今日的ではないとみなされています。
　
- 5.005 threads
  今後は ithreads を使うよう推奨されています。

- 疑似ハッシュ(Pseudohashes):
　ユーザーサイドから見えてしまう現在の疑似ハッシュの実装は今後削除の
　末、より明解なものに変更される予定です。また、内部的な実装に関して
　も、疑似ハッシュの存在そのものがパフォーマンス低下要因となっている
　ため削除される予定です。
　
- exec LIST と system LIST における汚染された(tainted)データの使用:
　現在は警告のみですが、将来は致命的エラーになる予定です。
　
- tr///C, tr///U:
  このインターフェースは失敗とみなされました。 pack("C0", ...) または
  pack("U0", ...) をご利用ください。

既知の問題

- AmigaOS でビルド不能です。

- Perlコンパイラ: バイトコンパイルおよびコンパイルがまだ機能しません。

- Lvalue subroutines: 依然実験的機能です。

- local() と tie() の相互作用: 仕様がまだ固まっていません。

- Tied/Magical Array/Hash は依然自動生成されません。

- Self-tying arrays and hashes (自分自身に対してtieした配列および
  ハッシュ): 現時点では明示的に禁止されています。

--- 

繰り返しになりますが、pod/perldelta.pod, INSTALL, および README.platform
にも目を通してください。以上です。


<%flags>
inherit => undef
</%flags>
%$r->content_type("text/plain; charset=euc-jp");
