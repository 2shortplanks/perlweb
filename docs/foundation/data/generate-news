#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use Time::Piece;
use Template;
use XML::RSS;
use Data::Dumper;
use constant WEB_CONTACT => 'perlfoundation@jbisbee.com';

my $VERBOSE = 0;
my $DATA_DIR = "news";
my $TPL_DIR = "../tpl";
my $WEB_DIR = "..";
my $FORCE_REGEN = 0;
my $current_entries = 5;
my $rss_entries = 10;

Getopt::Long::Configure( "no_ignore_case" );
GetOptions(
    'd|data-directory=s'  => \$DATA_DIR,
    't|tpl-directory=s'   => \$TPL_DIR,
    'w|web-dir=s'         => \$WEB_DIR,
    'f|force-regen'       => \$FORCE_REGEN,
    'c|current_entries=s' => \$current_entries,
    'r|rss_entries=s'     => \$rss_entries,
    'v|verbose'           => \$VERBOSE,
    'h|help'              => sub { pod2usage({-VERBOSE => 1, -input => \*DATA}); exit; },
    'H|man'               => sub { pod2usage({-VERBOSE => 2, -input => \*DATA}); exit; },
);

# FIXME this can be put into a fuction
die "data-directory: Not a valid directory: $DATA_DIR" if $DATA_DIR && !-d $DATA_DIR;
die "tpl-directory: Not a valid directory: $TPL_DIR" if $TPL_DIR && !-d $TPL_DIR;
die "web-dir: Not a valid directory: $WEB_DIR" if $WEB_DIR && !-d $WEB_DIR;
$DATA_DIR .= "/" if $DATA_DIR && $DATA_DIR !~ /\/$/;
$TPL_DIR .= "/" if $TPL_DIR && $TPL_DIR !~ /\/$/;
$WEB_DIR .= "/" if $WEB_DIR && $WEB_DIR !~ /\/$/;
print STDERR "[DIR DATA] data directory: $DATA_DIR\n" if $VERBOSE;
print STDERR "[DIR TPL ] tpl directory: $TPL_DIR\n" if $VERBOSE;
print STDERR "[DIR WEB ] web directory: $WEB_DIR\n" if $VERBOSE;

my $TEMPLATE = {
    input => {
	current         => $TPL_DIR . "news/current.html",
	archive         => $TPL_DIR . "news/archive.html",
	archive_summary => $TPL_DIR . "news/archive.html",
	individual      => $TPL_DIR . "news/individual_entry.html",
    },
    output => {
	current         => $WEB_DIR . "news/current_news.html",
	archive         => $WEB_DIR . "news/YEAR/index.html",
	archive_summary => $WEB_DIR . "news/index.html",
	individual      => $WEB_DIR . "news/YEAR/SHORTNAME.html",
    },
    depends => {
	current         => [$TPL_DIR . "news/list.html", $TPL_DIR . "news/entry.html"],
	archive         => [$TPL_DIR . "news/archive_year_list.html", $TPL_DIR . "news/list.html", 
			    $TPL_DIR . "news/entry.html"],
	archive_summary => [$TPL_DIR . "news/archive_year_list.html"],
	individual      => [],
    }
};

# use cwd unless we have a data directory
my @news_data = load_news_data($DATA_DIR);
my $num_data = @news_data;
print STDERR "[DATA    ] $num_data files found\n" if $VERBOSE;

die "No data found\n" unless $num_data;

my $template = Template->new({ 
    INCLUDE_PATH => [$TPL_DIR], 
    RELATIVE     => 1, 
    POST_CHOMP   => 1,
});

my $rss_entries_index = $rss_entries - 1;
my @rss = @news_data[0 .. $rss_entries_index];
my @current = splice(@news_data,0,$current_entries);
generate_current($template,\@current,\@rss,\@news_data);
generate_archive($template,\@news_data);
generate_individual($template,[@current,@news_data]);

sub load_news_data {
    my ($data_dir) = @_;
    my @data_files = $data_dir ? glob($data_dir."*") : glob("*");
    my @news_data = ();
    my %seen_shortnames = ();
    for my $file (@data_files) {
	my $news_entry = load_news_data_file($file);
	my $shortname = $news_entry->{shortname};
	die "$shortname not unique\n  $file\n  $seen_shortnames{$shortname}\n"
	    if $seen_shortnames{$shortname};
	$seen_shortnames{$shortname} = $file;
	push @news_data, $news_entry;
    }
    @news_data = sort { $b->{yyyymmdd} <=> $a->{yyyymmdd} } @news_data;

    return wantarray ? @news_data : \@news_data;
}

sub load_news_data_file {
    my ($file) = @_;
    open my $fh, $file or die "Can't open: $file";
    print STDERR "[PARSING ] $file\n" if $VERBOSE;

    my ($yyyymmdd,$shortname,$title) = parse_header($file,$fh);
    my $t = Time::Piece->strptime($yyyymmdd, "%Y%m%d");
    my $year = $t->year;
    my $link = "/news/$year/$shortname.html";
    my ($body,$long_body) = parse_body($file,$fh);

    my $safe_title = lc $title;
    $safe_title =~ s/\W/_/g;
    my $safe_filename = $yyyymmdd . '-' . $safe_title;

    my $news_entry = {
	title         => $title,
	file          => $file,
	pretty_date   => $t->fullmonth . " " . $t->mday . ", " . $year,
	year          => $year,
	yyyymmdd      => $yyyymmdd,
	shortname     => $shortname,
	output_file   => $WEB_DIR . 'news/$year/$shortname.html',
	link          => $link,
	abs_link      => "http://www.perlfoundation.org$link",
	body          => $body,
	long_body     => $long_body,
	safe_filename => $safe_filename,
    };

    return $news_entry;
}

# this is kind of ugly, order is assumed: Date, Short, Title
sub parse_header {
    my ($file,$fh) = @_;

    my $yyyymmdd = <$fh>;
    my $shortname = <$fh>;
    my $title = <$fh>;
    my $blank = <$fh>;

    # very ugly header parsing...
    $yyyymmdd =~ s/^Date:\s+//i;
    $shortname =~ s/^Short:\s+//i;
    $title =~ s/^Title:\s+//i;
    $_ =~ s/\s+$//s for ($yyyymmdd, $shortname, $title,$blank); # trim trailing whitespace

    # cheap/ugly validtion :(
    die "YYYYMMDD not found in file: $file" unless $yyyymmdd;
    die "YYYYMMDD not a date $yyyymmdd\n  file: $file" unless $yyyymmdd =~ /^\d{8}$/;
    die "Short name not defined in file: $file " unless $shortname;
    die "Short name is invalid: $shortname\n  file: $file" unless $shortname =~ /^\w+$/;
    die "Header blank line seperator line not found\n  $file" if $blank;

    return ($yyyymmdd,$shortname,$title);
}

sub parse_body {
    my ($file,$fh) = @_;
    my $long_body = "";
    my $body = "";
    my $marker = 0;

    while (my $line = <$fh>) {
	if ($line =~ /^--+/) {
	    print STDERR "[BODY    ] Seperator Found: $file\n" if $VERBOSE;
	    $marker = 1;
	    next;
	}

	if ($marker) {
	    $long_body .= $line;
	}
	else {
	    $body .= $line;
	}
    }

    return ($body,$long_body);
}

# IN:   /tpl/news/list.html
# OUT:  /current_news.html
sub generate_current {
    print STDERR "[SECTION ] current\n" if $VERBOSE;
    my ($template, $current, $rss, $news_data) = @_;
    my $vars = { news_data => $current, max_year => $current->[0]{year}};
    my $depends = [ map { $_->{file} } @$current ];
    process($template,'current',$vars,undef,$depends);
    generate_rss($rss);
}

# IN:  /tpl/news/archive.html
# OUT: /news/$YEAR/index.html for (@YEARS)
# OUT: /news/index.html
sub generate_archive {
    print STDERR "[SECTION ] archive\n" if $VERBOSE;
    my ($template, $news_data) = @_;
    my ($years, $news_data_by_year) = build_years($news_data);
    my $max_year = 0;
    for my $year (@$years) {
	$max_year = $year if $year > $max_year;
	my $news_archive_data = $news_data_by_year->{$year};
	my $output_template = $TEMPLATE->{output}{archive};
	$output_template =~ s/YEAR/$year/;
	my $vars = { news_data => $news_archive_data, year => $year, years => $years };
	my $depends = [ map { $_->{file} } @$news_archive_data ];
	process($template,'archive',$vars,$output_template,$depends);
    }
    my $max_year_news_data = $news_data_by_year->{$max_year};
    my $depends = [ map { $_->{file} } @$max_year_news_data ];
    my $vars = { news_data => $max_year_news_data, years => $years };
    process($template,'archive_summary', $vars, undef, $depends);
}

# IN: /tpl/news_individual
# OUT: /news/$YEAR/$SHORTNAME.html for (@DATA_FILES)
sub generate_individual {
    print STDERR "[SECTION ] individual\n" if $VERBOSE;
    my ($template,$news_data) = @_;
    for my $news_entry (@$news_data) {
	my $output_template = $TEMPLATE->{output}{individual};
	my $dir = $WEB_DIR . "news/$news_entry->{year}";
	mkdir $dir unless -d $dir;
	$output_template =~ s/YEAR/$news_entry->{year}/;
	$output_template =~ s/SHORTNAME/$news_entry->{shortname}/;
	my $depends = [ $news_entry->{file} ];
	process($template,'individual', { news => $news_entry }, $output_template, $depends); 
    }
}

sub generate_rss {
    print STDERR "[SECTION ] rss\n" if $VERBOSE;
    my ($rss_entries) = @_;

    my $t = localtime;
    my %rss_common = (
	title          => 'The Perl Foundation',
	link           => 'http://www.perlfoundation.org',
    );

    my $rss_10 = XML::RSS->new(version => '1.0');
    my $rss_20 = XML::RSS->new(version => '2.0');

    $rss_10->channel(%rss_common);
    $rss_20->channel(%rss_common,
	language       => 'en',
	pubDate        => $t->strftime,
	lastBuildDate  => $t->strftime,
	webMaster      => WEB_CONTACT,
    );
    
    for my $news_entry (@$rss_entries) {
	my %entry = (
	    title       => $news_entry->{title},
	    link        => $news_entry->{abs_link},
	    description => $news_entry->{body} . $news_entry->{long_body},
	);
	$rss_10->add_item(%entry);
	$rss_20->add_item(%entry);
    }

    my @depends = map { $_->{file} } @$rss_entries;
    my $rss_10_file = $WEB_DIR . 'news/tpf_rss_10.rss';
    if (regen_check($rss_10_file, @depends)) {
	print STDERR "[GENERATE] $rss_10_file\n" if $VERBOSE;
	$rss_10->save($rss_10_file);
    }

    my $rss_20_file = $WEB_DIR . 'news/tpf_rss_20.rss';
    if (regen_check($rss_20_file, @depends)) {
	print STDERR "[GENERATE] $rss_20_file\n" if $VERBOSE;
	$rss_20->save($rss_20_file);
    }
}

# get list of years for archive
sub build_years {
    my ($news_data) = @_;
    my %years = ();
    my %news_data_by_year = ();

    for my $news_entry (@$news_data) {
	my $year = $news_entry->{year};
	$years{$year}++;
	$news_data_by_year{$year} = [] unless $news_data_by_year{$year};
	push @{$news_data_by_year{$year}}, $news_entry;
    }
    my @years = sort { $b <=> $a } keys %years;

    return (\@years, \%news_data_by_year);
}

sub process {
    my ($template,$type,$vars,$output,$depends) = @_;
    my $input = $TEMPLATE->{input}{$type};
    my $default_depends = $TEMPLATE->{depends}{$type};
    $output ||= $TEMPLATE->{output}{$type};

    if (regen_check($output,$input,@$depends,@$default_depends)) {
	print STDERR "[GENERATE] $output\n" if $VERBOSE;
	$template->process($input, $vars, $output);
    }
}

sub regen_check {
    my ($output,@files_to_check) = @_;
    return 1 if $FORCE_REGEN;

    my $mtime_output = file_mtime($output);
    my $regenerate = 0;

    for my $file (@files_to_check) {
	my $compare_mtime = file_mtime($file);
	$regenerate = 1 if $mtime_output < $compare_mtime;
	#print STDERR "[REGEN   ] $output ($mtime_output) < $file ($compare_mtime)\n" if $regenerate;
    }

    return $regenerate;
}

sub file_mtime {
    my ($file) = @_;
    return 0 unless -e $file;
    return (stat $file)[9];
}

__DATA__
=head1 NAME

generate-news - generate the templates for data driven news

=head1 SYNOPSIS

generate-news 

    -d  --data-directory    Directory data is stored in 
    -t  --tpl-directory     News template directory
    -w  --web-dir           Root directory of the web content
    -c  --current-entries   Number of news items on the homepage
    -r  --rss_entries       Number of news items in the rss feed
    -d  --data-dir          Directory containing data files
    -v  --verbose           Verbose output
    -f  --force-regen       Force regeneration of all content
    -h  --help              Display this help
    -H  --man               Display detailed help (examples)


=head1 ADDING NEWS ITEMS

Here is a quick summary of how to add a news item.

=over 4

=item 1.

cd to docs/live/foundation/data

=item 2.

edit news/yyyymmdd-match_the_title_but_in_a_safe_filename_way

    vim news/20050704-happy_forth_of_july_from_tpf

=item 3.

Follow the above format for a data file.  (Date:, Short:, and Title: headers, 
a space, then the content of the news item with an optional '---' to break 
up long entries so they'll fit nicely on the homepage.

    Date: 20050704
    Short: happyforth
    Title: Happy Forth of July from TPF

    <p>This is a short sample of a body.  Blah, Blah Blah...</p>
    ---
    <p> This is an extended body that will not show up on the homepage or 
    yearly archive pages, but a Read more... link will be provided to view them</p>

=item 4.

Run generate-news (-v for verbose and/or -f to force all template regeneration)

=item 5.

cd to the foundation directory

=item 6.

svn status to see what changed

=item 7.

Verify the results with your web browser 

=item 8.

svn add and commit new and modified files

=back


=head1 OUTPUT FILES

Here is the list of currently generated content from thie script.  (You can get
the same output by running the script with the '-v' flag.

    [SECTION ] current
    [GENERATE] ../news/current_news.html
    [SECTION ] rss
    [GENERATE] ../news/tpf_rss_10.rss
    [GENERATE] ../news/tpf_rss_20.rss
    [SECTION ] archive
    [GENERATE] ../news/2005/index.html
    [GENERATE] ../news/2004/index.html
    [GENERATE] ../news/2003/index.html
    [GENERATE] ../news/2002/index.html
    [GENERATE] ../news/2001/index.html
    [GENERATE] ../news/index.html
    [SECTION ] individual
    [GENERATE] ../news/2005/yapcna2005cfp.html
    [GENERATE] ../news/2004/ppigrant.html
    [GENERATE] ../news/2004/yapcna2005venue.html
    [GENERATE] ../news/2004/wc2004.html
    ...
