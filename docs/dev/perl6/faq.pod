=head1 NAME

Perl6 FAQ

=head1 GENERAL QUESTIONS

=head2  Will I be able to convert my Perl 5 programs to Perl 6?

Yes. Larry Wall and others are already working on a Perl 5 to Perl 6
translator, which will be able to translate (most) Perl 5 source code to
the equivalent Perl 6 syntax.

In addition, Perl 6 will provide a "Perl 5 compatibility mode", allowing
the compiler to directly execute any code that it recognizes as being
written in Perl 5.


=head2  Is anyone going to bother to switch from Perl 5 to Perl 6?

Yes. Unlike Perl 5, Perl 6 will provide:

=over

=item explicit strong typing

=item proper parameter lists

=item active metadata on values, variables, subroutines, and types

=item declarative classes with strong encapsulation

=item full OO exception handling

=item support for the concurrent use of multiple versions of a module

=item extensive introspection facilities (including of POD)

=item LL and LR grammars (including a built-in grammar for Perl 6 itself)

=item subroutine overloading

=item multiple dispatch

=item named arguments

=item a built-in switch statement

=item hierarchical construction and destruction

=item distributive method dispatch

=item method delegation

=item named regexes

=item overlapping and exhaustive regex matches within a string

=item named captures

=item parse-tree pruning

=item incremental regex matching against input streams

=item macros (that are implemented in Perl itself)

=item user-definable operators (from the full Unicode set)

=item chained comparisons

=item a universally accessible aliasing mechanism

=item lexical exporting (via a cleaner, declarative syntax)

=item multimorphic equality tests

=item state variables

=item hypothetical variables

=item hyperoperators (i.e. vector processing)

=item function currying

=item junctions (i.e. superpositional values, subroutines, and types)

=item coroutines

=back

Developers who want to take advantage of those new and/or improved features
will switch to Perl 6.


=head2  Perl 6 looks even more obfuscatory and line-noisy than Perl 5 is
         -- does Perl 6 make it likely that programmers will write code that is
         unreadable/unmaintainable by mere mortals?

Many of the features mentioned in the previous answer are specifically aimed
at making well-written Perl 6 code even more readable and maintainable than
well-written Perl 5 code.

As for line-noisy, Perl 6 will remove or mitigate many of the usual
suspects. For example, the majority of the punctuation variables are
gone, and the regex syntax has been considerably sanitized.
However, much of what Perl's detractors refer to as "line-noise", we
prefer to call "the actual syntax of the language". Complaining that
Perl is "noisy" is like complaining that English is "wordy": all
those confusing pronouns and gerunds and prepositions and conjunctive
adverbs, etc. making it hard to read.

Perl's fundamental philosophy in that area isn't going to change, so
Perl 6 will still have a rich grammar in which distinct components are
specified using distinctive syntactic forms.


=head2  Will people be able to develop in Perl 6 and release stand-alone
         executables, so as to protect their original code?

Parrot (the virtual machine on which Perl6 will run) can compile your
program to bytecode and -- on commonly used platforms -- to native
executable files. So Perl6 will be exactly like every other compiled
language: it will be possible to protect your source code, but only from
those who don't know how to run a disassembler.


=head2 Will people be able to develop in Perl 6 and release stand-alone
        executables that don't require any other system resources?

No. In the foreseeable future all Perl6 programs will require the resources
of the Parrot engine.

