#
# *** DO NOT EDIT THIS FILE ***
# Generated on Mon Jul 25 22:03:08 2011 UTC, by
#   CPANRatings::Schema::Scaffold (undef)
#   Mesoderm (0.111870)
#   Moose::Object (2.0010)
#

package CPANRatings::Schema::_dbic;
use base qw(DBIx::Class::Schema);

package CPANRatings::Schema::_scaffold;
use Moose::Role;
requires 'connect_args';

has 'dbic' => (
    is      => 'ro',
    isa     => 'CPANRatings::Schema::_dbic',
    lazy    => 1,
    default => sub {
        my $self = shift;
        CPANRatings::Schema::_dbic->connect( $self->connect_args );
    },
);

##
## Table: review_users
##

has 'user' => (
    is      => 'ro',
    lazy    => 1,
    isa     => 'CPANRatings::Schema::ResultSet::User',
    default => sub { shift->dbic->resultset('user'); },
);

{

    package CPANRatings::Schema::User;
    use Moose;
    extends 'DBIx::Class';

    __PACKAGE__->load_components(qw/ PK::Auto Core /);

    no Moose;

    __PACKAGE__->table('review_users');
    __PACKAGE__->add_columns(
        id => {
            data_type         => 'MEDIUMINT',
            default_value     => undef,
            extra             => { unsigned => 1 },
            is_auto_increment => 1,
            is_nullable       => 0,
            size              => 8
        },
        bitcard_id => {
            data_type     => 'CHAR',
            default_value => undef,
            is_nullable   => 1,
            size          => 40
        },
        username => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 1,
            size          => 128
        },
        name => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 1,
            size          => 128
        },
        content_suppressed => {
            data_type     => 'TINYINT',
            default_value => '0',
            extra         => { unsigned => 1 },
            is_nullable   => 0,
            size          => 3
        },
    );
    __PACKAGE__->set_primary_key(qw/ id /);
    __PACKAGE__->add_unique_constraint( username => [qw/ username /] );
    __PACKAGE__->has_many(
        reviews => 'CPANRatings::Schema::Review',
        { 'foreign.user' => 'self.id' }
    );
    __PACKAGE__->many_to_many( 'helpfuls' => qw[ reviews helpfuls ] );
    {

        package CPANRatings::Schema::ResultSet::User;
        use Moose;
        extends 'DBIx::Class::ResultSet';
        no Moose;
    }
    __PACKAGE__->resultset_class('CPANRatings::Schema::ResultSet::User');
    CPANRatings::Schema::_dbic->register_class( user => __PACKAGE__ );
}

##
## Table: reviews
##

has 'review' => (
    is      => 'ro',
    lazy    => 1,
    isa     => 'CPANRatings::Schema::ResultSet::Review',
    default => sub { shift->dbic->resultset('review'); },
);

{

    package CPANRatings::Schema::Review;
    use Moose;
    extends 'DBIx::Class';

    __PACKAGE__->load_components(qw/ InflateColumn::DateTime PK::Auto Core /);

    with 'CPANRatings::Schema::Role::Review';
    no Moose;

    __PACKAGE__->table('reviews');
    __PACKAGE__->add_columns(
        id => {
            data_type         => 'MEDIUMINT',
            default_value     => undef,
            extra             => { unsigned => 1 },
            is_auto_increment => 1,
            is_nullable       => 0,
            size              => 8
        },
        user => {
            data_type     => 'MEDIUMINT',
            default_value => undef,
            extra         => { unsigned => 1 },
            is_nullable   => 0,
            size          => 8
        },
        user_name => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 0,
            size          => 255
        },
        module => {
            data_type     => 'VARCHAR',
            default_value => undef,
            extra         => {
                'character set' => 'utf8',
                collate         => 'utf8_bin'
            },
            is_nullable => 0,
            size        => 255
        },
        distribution => {
            data_type     => 'VARCHAR',
            default_value => undef,
            extra         => {
                'character set' => 'utf8',
                collate         => 'utf8_bin'
            },
            is_nullable => 0,
            size        => 255
        },
        version_reviewed => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 0,
            size          => 255
        },
        updated => {
            data_type     => 'DATETIME',
            default_value => undef,
            is_nullable   => 0,
            size          => 0
        },
        review => {
            data_type     => 'TEXT',
            default_value => undef,
            is_nullable   => 0,
            size          => 65535
        },
        rating_overall => {
            data_type     => 'TINYINT',
            default_value => undef,
            extra         => { unsigned => 1 },
            is_nullable   => 1,
            size          => 3
        },
        rating_1 => {
            data_type     => 'TINYINT',
            default_value => undef,
            extra         => { unsigned => 1 },
            is_nullable   => 1,
            size          => 3
        },
        rating_2 => {
            data_type     => 'TINYINT',
            default_value => undef,
            extra         => { unsigned => 1 },
            is_nullable   => 1,
            size          => 3
        },
        rating_3 => {
            data_type     => 'TINYINT',
            default_value => undef,
            extra         => { unsigned => 1 },
            is_nullable   => 1,
            size          => 3
        },
        rating_4 => {
            data_type     => 'TINYINT',
            default_value => undef,
            extra         => { unsigned => 1 },
            is_nullable   => 1,
            size          => 3
        },
    );
    __PACKAGE__->set_primary_key(qw/ id /);
    __PACKAGE__->has_many(
        helpfuls => 'CPANRatings::Schema::Helpful',
        { 'foreign.review' => 'self.id' }
    );
    __PACKAGE__->belongs_to(
        user => 'CPANRatings::Schema::User',
        { 'foreign.id' => 'self.user' }
    );
    {

        package CPANRatings::Schema::ResultSet::Review;
        use Moose;
        extends 'DBIx::Class::ResultSet';
        with 'CPANRatings::Schema::ResultSet::Role::Review';
        no Moose;
    }
    __PACKAGE__->resultset_class('CPANRatings::Schema::ResultSet::Review');
    CPANRatings::Schema::_dbic->register_class( review => __PACKAGE__ );
}

##
## Table: reviews_helpful
##

has 'helpful' => (
    is      => 'ro',
    lazy    => 1,
    isa     => 'CPANRatings::Schema::ResultSet::Helpful',
    default => sub { shift->dbic->resultset('helpful'); },
);

{

    package CPANRatings::Schema::Helpful;
    use Moose;
    extends 'DBIx::Class';

    __PACKAGE__->load_components(qw/ Core /);

    no Moose;

    __PACKAGE__->table('reviews_helpful');
    __PACKAGE__->add_columns(
        review => {
            data_type     => 'MEDIUMINT',
            default_value => undef,
            extra         => { unsigned => 1 },
            is_nullable   => 0,
            size          => 8
        },
        user => {
            data_type     => 'MEDIUMINT',
            default_value => undef,
            extra         => { unsigned => 1 },
            is_nullable   => 0,
            size          => 8
        },
        helpful => {
            data_type     => 'ENUM',
            default_value => undef,
            extra         => { list => [ '1', '0' ] },
            is_nullable   => 0,
            size          => 1
        },
    );
    __PACKAGE__->set_primary_key(qw/ review user /);
    __PACKAGE__->belongs_to(
        review => 'CPANRatings::Schema::Review',
        { 'foreign.id' => 'self.review' }
    );
    __PACKAGE__->many_to_many( 'user' => qw[ review user ] );
    {

        package CPANRatings::Schema::ResultSet::Helpful;
        use Moose;
        extends 'DBIx::Class::ResultSet';
        no Moose;
    }
    __PACKAGE__->resultset_class('CPANRatings::Schema::ResultSet::Helpful');
    CPANRatings::Schema::_dbic->register_class( helpful => __PACKAGE__ );
}

1;
