=head1 Artistic License 2.0 Notes

The heart of the Artistic license is the idea that artists, people who create
things, should be able to have ongoing artistic involvement in their work. The
goal of the Artistic 2.0 revision is to make the terms of the original Artistic
License clearer and more readable. In some cases we expanded it to make it more
legally specific. In some cases we made the language more general so the
license may fit better with past and future changes in technology. 

Legal documents can be considered as just another form of code. You'll see a
lot of spaghetti legal code out there, lengthy and obtuse, but it doesn't have
to be like that.  Readability and maintainability are just as important in
legal code as they are in software. But, because legal documents are code, our
drafting choices are based on a need to capture a particular legal meaning. 

These notes are based on comments and questions that came up as we worked on
this revision.  We hope they will help you understand how to use the new
license. To make the comments easier to follow, we use Perl as an example in
these notes.

=head3 Section 1:

This section applies to using Perl yourself "as is", or
changing it but only using the changed version yourself or inside your
organization.  The rest of the license does not come into play unless you want
to make Perl available to others, in a standard or modified version.

=head3 Section 2:

You can redistribute unchanged versions of the Perl source code.
You can't charge a licensing fee for it, but you can charge for distributing it
or for providing support.

=head3 Section 3:

Fixing a few bugs, tweaking the code to run on your operating
system, or applying a security patch from the development mailing list doesn't
mean you've created a "Modified Version".

=head3 Section 4:

You have a few different options if you want to change the code and
redistribute it.  Whatever option you choose, you must let people know that
you've changed the code. In general, we expect that you would do this using a
file in the top-level of the distribution noting what's changed and that you
will update the documentation anywhere your code works differently from what
the documentation says (you would probably want to do this anyway, so the
documentation isn't misleading).  However, there are other ways to meet the
requirements. For instance, you might include a comment in each changed file,
or beside each change in the code.

Under Section 4(a), you can make any changes you want if you contribute them
back under the Artistic License.

Under Section 4(b), you can release a proprietary version of the Perl source
code, but if you do, don't pretend your code is the real Perl. Don't call it
Perl, and don't make it so your users can't use the real Perl on the same
machine. This requirement goes back to the idea of artistic control.

Under Section 4(c)(i), you can make any changes you want if you release your
changes under the Artistic License.

Section 4(c)(ii) is what we call the "relicensing" clause. Perl 6 and Parrot
won't be dual licensed with the GPL, unlike Perl 5. Since they won't be dual
licensed, if you want to use Perl 6 or Parrot under a GPL license, you will
doing so under 4(c)(ii).   Several other open source and free software licenses
also qualify under 4(c)(ii), including the LGPL, MPL, and the Apache license.
Note that these are only what have become known as "copy-left" licenses:
"freely available" means both free as in speech and free as in beer.

=head3 Section 5:

If you don't change the code, you can ship it out as compiled code
without the source code. Just tell people how to get the source code.

=head3 Section 6:

When it comes to Modified Versions, whether you're shipping compiled
code or source code, the requirements are the same. 

=head3 Section 7:

Example: you can ship Perl on a CD along with other software, or
include it in your distribution of Linux.

=head3 Section 8:

You're totally free to embed Perl inside your software in a way
that doesn't allow users to access Perl. On the other hand, if you embed it and
users can nevertheless do things like running Perl scripts, then you're really
are distributing Perl and need make sure that your distribution fits one of the
use cases in (1)-(7).

=head3 Section 9:

When you write code that just runs on Perl, that fact alone does
not make the code subject to the Artistic License.  It's your code. (This seems
pretty obvious, but it's important to say it.) 

=head3 Section 10:

The license offers you some rights. In order to obtain those
rights, you need to accept the license. You can reject the license, but if you
do, the rights aren't granted to you.

=head3 Section 11:

You're responsible for your own actions. If you get a copy of Perl
from someone who broke the terms of the Artistic License, that doesn't get you
off the hookE<mdash>you're still required to comply with the license yourself.
There are plenty of places where you can get legal copies of Perl, so it should
be pretty easy to get back into compliance.

=head3 Section 12:

Just being explicit that the license doesn't grant you trademark
rights, or rights related to trademark rights. 

=head3 Section 13:

We're not particularly fond of patents, but they're part of the
world we live in.  So, with a goal of minimizing the likelihood of patent
infringement claims, we grant you a patent license from all our contributors,
with a termination clause that's triggered if infringement litigation is filed.
The termination affects only your license to Packages that you allege are
infringements, not every Artistic License on every Package you've ever licensed
from us or anyone else.

=head3 Section 14:

Disclaimers of warranties and damages, like those you find in other
open source and software licenses.

=cut
