# -*- cperl -*-
eval 'exec $CBROOT/bin/perl $0 ${1+"$@"}'
  if $running_under_some_shell;
use strict;
use warnings;

use Getopt::Long qw(GetOptions);
use Rose::DB::Object 0.765;
use Rose::DB::Object::Loader;
use File::Path qw(mkpath);
use Combust::Config;
use Combust::RoseDB;
use Combust::RoseDB::Manager;

GetOptions(
  'db=s@' => \my @db_name,
  'all'   => \my $all,
);

@db_name = grep { $_ ne 'default' } Combust::Config->database_names if $all;
@db_name = @ARGV if !@db_name and @ARGV;

die "Nothing todo, specify a database with --db={prod,feeds,...} or use --all\n" unless @db_name;

if (my @unknown = grep { !Combust::Config->database($_) } @db_name) {
  warn "Unknown db '$_'\n" for @unknown;
  exit 1;
}

$| = 1;

my $scaffold_class = Combust::Config->scaffold_class;

# If not set in combust.conf and only one Scaffold.pm exists 
# under $ENV{CBROOTLOCAL}/lib then use it
if (!$scaffold_class and my $cbrootlocal = $ENV{CBROOTLOCAL}) {
  require File::Find;
  my @files;
  File::Find::find(sub {
    package File::Find;
    our $name;
    push @files, $name if /^Scaffold\.pm$/
  },"$cbrootlocal/lib");
  die "Cannot determine Scaffold class, found (@files)\n" if @files > 1;
  if (@files == 1) {
    (my $file = $files[0]) =~ s,.*/lib/,,;
    $file =~ s/.pm$//;
    ($scaffold_class = $file) =~ s,/,::,g;
  }
}

die "No Scaffold class found\n" unless $scaffold_class;

eval "require $scaffold_class" or die $@;

my %done;
foreach my $db_name (@db_name) {
  my $db_cfg = Combust::Config->database($db_name);
  $db_cfg = Combust::Config->database($db_name = $db_cfg->{alias}) if $db_cfg->{alias};
  my $model_class = $db_cfg->{model_class} || $scaffold_class->db_model_class($db_name)
    or die "No model_class for '$db_name'\n";
  next if $done{$model_class}++;
  $db_cfg->{type} ||= $db_name;
  generate_model($db_cfg, $model_class);
}

sub generate_model {
  my ($db_cfg, $model_class) = @_;

  print "Generating $model_class ...\n";

  my $object_class = $db_cfg->{object_class} || ($model_class . "::_Object");
  my $meta_class   = $db_cfg->{meta_class}   || ($model_class . "::_Meta");
  my $type         = $db_cfg->{type};

  my $db_name = $db_cfg->{name};
  my $cm_class            = $scaffold_class->convention_manager($db_name);
  my @object_base_classes = $scaffold_class->object_base_classes($db_name);

  (my $base_defn = <<EOS) =~ s/^    //gm;
    BEGIN {
      package $meta_class;
      use base qw(Combust::RoseDB::Metadata);
      use $cm_class;
      our \$VERSION = 0;

      sub registry_key { __PACKAGE__ }
      sub init_convention_manager { $cm_class->new }
    }
    BEGIN {
      package ${model_class}::_Base;
      use base qw(@object_base_classes);
      our \$VERSION = 0;

      sub init_db       { shift; Combust::RoseDB->new_or_cached(\@_, type => '$type', combust_model => "$model_class") }
      sub meta_class    {'$meta_class'}
      sub combust_model { our \$model ||= bless [], '$model_class'}
    }
    BEGIN {
      package ${model_class}::_Object;
      use base qw(${model_class}::_Base Rose::DB::Object);
      our \$VERSION = 0;
    }
    BEGIN {
      package ${model_class}::_Object::Cached;
      use base qw(${model_class}::_Base Rose::DB::Object::Cached);
      our \$VERSION = 0;
    }
EOS
  eval $base_defn;
  die $@ if $@;
 
  my $db = $object_class->init_db;
  my $loader = Rose::DB::Object::Loader->new(
    db            => $db,
    base_class    => $object_class,
    class_prefix  => "Foo__::$model_class", # Prevents ::Loader loading existing classes
    with_managers => 0,
    convention_manager => $cm_class,
    pre_init_hook => sub { $scaffold_class->class_pre_init_hook(@_) },
  );

  my @classes = sort grep { $_->isa('Rose::DB::Object') }
    $loader->make_classes(
      filter_tables => sub { $scaffold_class->filter_tables($db, $_) },
    );

  (my $model_path = $model_class) =~ s,::,/,g;
  my $model_file = $ENV{CBROOTLOCAL} . "/lib/$model_path.pm";

  (my $model_dir = $model_file) =~ s,/[^/]+$,,;
  mkpath($model_dir) unless -d $model_dir;

  open(FH,">$model_file.tmp") or die "Canot open '$model_file.tmp': $!\n";
  select(FH);

  print <<EOS, $base_defn;
package $model_class;
##
## This file is auto-generated *** DO NOT EDIT ***
##
use Combust::RoseDB;
use Combust::RoseDB::Manager;

our \@table_classes;

EOS


  foreach my $class (@classes) {
    my $meta = $class->meta;

    foreach my $col ($meta->columns) {
      $col->default('now') if $col->type eq 'datetime' and !$col->default and $col->not_null;
    }

    my $is_cached = $scaffold_class->cache_table($meta);

    my @isa = $is_cached ? ( isa => "${object_class}::Cached") : ();
    my $t = $meta->perl_class_definition(indent => 2, @isa);
    my $m = $meta->perl_manager_class( isa => 'Combust::RoseDB::Manager');

    $t =~ s/^use Foo__.*\n\n?//mg;
    s/\s*^1;$//m for $t, $m;
    s/Foo__:://g for ($t, $m, $class);

    if (my $json_columns = $meta->{__combust_json_columns}) {
      $t .= "\nuse Combust::RoseDB::JsonFields qw( @{$json_columns} );\n";
    }
    (my $class_path = $class) =~ s,::,/,g;

    print <<EOS;

{ $t
push \@table_classes, __PACKAGE__;
}

{ $m}

# Allow user defined methods to be added
eval { require $class }
  or \$@ !~ m:^Can't locate $class_path.pm: and die \$@;
EOS

  }

  print <<EOS;
{ package $model_class;

  sub db  { shift; $object_class->init_db(\@_);      }
  sub dbh { shift->db->dbh; }

  my \@cache_classes = grep { \$_->can('clear_object_cache') } \@table_classes;
  sub flush_caches {
    \$_->clear_object_cache for \@cache_classes;
  }

EOS

  foreach my $class (@classes) {
    $class =~ s/Foo__:://g;
    (my $meth = $class) =~ s/([A-Z])/_\l$1/g;
    $meth =~ s/.*::_//;
    print "  sub $meth { our \$$meth ||= bless [], '${class}::Manager' }\n";
  }
  print "\n}\n1;\n";

  select(STDOUT);
  close(FH);

  rename("$model_file.tmp", $model_file);
}

