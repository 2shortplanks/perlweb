# -*- cperl -*-
eval 'exec $CBROOT/bin/perl $0 -w ${1+"$@"}'
  unless $running_under_some_shell;

use strict;
use Getopt::Long;
use Fcntl;

use lib $ENV{CBROOT} . "/lib";

use Combust::Config;
use Combust::DB qw();

my $debug=0;

Getopt::Long::Configure('pass_through');
GetOptions(
    'vc=s'  => \my $opt_vc,
    'pod=s' => \my $opt_pod,
    'dbishell'	=> \my $opt_dbishell,
    'dbido=s'	=> \my $opt_dbido,
    'quiet'	=> \my $opt_quiet,
    'lock=s'    => \my $opt_lock,
    'pingall:i' => \my $opt_pingall,
) or die;

my @opts;
push @opts, shift while @ARGV && $ARGV[0] =~ /^-/;

my $dbname = $ARGV[0];

if ($opt_dbido) {
    my %attr = (RaiseError => 1);
    @attr{qw(lock lock_name)} = ( 1, $opt_lock ) if $opt_lock;
    my $dbh = db_open($dbname, \%attr);
    my $rows = $dbh->do($opt_dbido);
    print "$opt_dbido: $rows rows\n" unless $opt_quiet;
    $dbh->disconnect;
    exit 0;
}

if ($opt_lock) {
    print "Waiting for lock '$opt_lock'...\n" if -t STDOUT and !$opt_quiet;
    my $dbh = db_open($dbname, { lock=>1, lock_name=>$opt_lock });
    print "Lock acquired, press return to release lock and exit...\n" if -t STDOUT and !$opt_quiet;
    <STDIN>;
    exit 0;
}


#die "$0: No database name specified.\n" unless $dbname;

my $cmd = ($opt_vc) ? $opt_vc
		    : ($0 =~ m/(my\w+)$/g)[0] || die "Can't determine command name to use from $0\n";
if ($cmd eq 'mysqladmin') {
    shift @ARGV; # db name not needed for mysqladmin
}

if ($opt_dbishell) {
    require DBI::Shell;
    my $shell = DBI::Shell::Combust->new(@ARGV);
    $shell->load_plugins;
    $shell->run;
    exit 0;
}

my ($host, $dbi_dsn, $user, $passwd) = Combust::DB::read_db_connection_parameters($dbname);
my @full_cmd;
my $show_cmd;

unless ($dbi_dsn =~ /:mysql:/) {
  die "Oops; I only support mysql (could not connect to [$dbi_dsn])";
}
else {

    # extract the port number from the dsn, if present, for non-standard ports
    unshift @opts, "--port=$1" if $dbi_dsn =~ /\bport=(\d+)/;
    if ($dbi_dsn =~ /\bdatabase=(\w+)/ && $1 ne $dbname) {
      #warn "Using database name '$1' from dsn instead of '$dbname'\n";
      $ARGV[0] = $dbname = $1;
    }

    $ENV{PAGER} = $ENV{MYSQL_PAGER} if $ENV{MYSQL_PAGER};
    $ENV{PAGER} = 'less -n -i -S -e'  if !$ENV{PAGER} or $ENV{PAGER} eq 'more'; # sideways scrolling, yeah!

    pipe(RDR,WTR);

    fcntl(RDR,F_SETFD,0);

    my $pid = fork();
    if ($pid) {
      close(WTR);
    }
    else {
      close(RDR);
      print WTR "[client]\npassword=$passwd\n";
      close(WTR);
      exit 0;
    }

    @full_cmd = ($cmd,"--defaults-extra-file=/dev/fd/" . fileno(RDR),"-h$host","-u$user", @opts, @ARGV);
    ($show_cmd = join " ", @full_cmd) =~ s/-p\S+/-pXXX/;
}

# Show command being used so people know what they're _actually_ connecting to
# not just what they think they are! But only if on a tty, not for cron jobs.
warn "$show_cmd   (dsn: $dbi_dsn)\n"
	if ($debug or -t STDIN && -t STDERR) and !$opt_quiet;

exec(@full_cmd);

# ---


package DBI::Shell::Combust;

use vars qw(@ISA);
BEGIN { @ISA = qw(DBI::Shell::Base) }

sub do_connect {
    my ($sh, $dsn, $user, $pass) = @_;
 
    $sh->do_disconnect if $sh->{dbh};

    $sh->{data_source} = $dsn;

    $sh->log("Connecting to '$sh->{data_source}' as '$sh->{user}'...");
    $sh->{dbh} = Combust::DB::db_open($dsn);
    $sh->{dbh}->trace($sh->{init_trace}) if $sh->{init_trace};
}

